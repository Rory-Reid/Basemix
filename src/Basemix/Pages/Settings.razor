@page "/settings"
@using Basemix.Db
@using System.IO
@using Basemix.Lib
@using CommunityToolkit.Maui.Storage
@inject GetDatabasePath GetDatabasePath;
@inject Migrator Migrator;
@implements IDisposable;

<h1>Settings</h1>

<p>
    Database location:
    <br />
    @dbPath
</p>

<button class="btn btn-primary" @onclick="ExportDb">Export database</button>

<hr />

<h2>Danger zone</h2>

<p>
    The buttons and options in this section will perform irreversible changes to your data. Please make sure you've
    backed up your database, or at the very least have made peace with whatever will happen as a result of these actions.
</p>


<input type="checkbox" @bind="dangerZoneEnabled" id="dangerCheckbox"/>
<label for="dangerCheckbox">I know what I'm doing</label>
<br />
<br />
<button class="btn btn-danger" @onclick="RecreateDatabase" disabled="@(!dangerZoneEnabled)">Delete and re-create database</button>
@if (this.dbDeleted)
{
    <p>
        <strong>Please restart basemix.</strong> The database has been deleted but anything basemix has already loaded
        from it will remain in memory until restarted - sorry.
    </p>
}

@code
{
    private CancellationTokenSource cts = new();
    
    private bool dangerZoneEnabled = false;
    private string dbPath = "ERROR";
    private bool dbDeleted = false;
    
    protected override void OnInitialized()
    {
        this.dbPath = GetDatabasePath();
    }

    public void RecreateDatabase()
    {
        if (!File.Exists(dbPath) || !this.dangerZoneEnabled)
        {
            return;
        }
        
        File.Delete(dbPath);
        this.Migrator.Start();
        this.dbDeleted = true;
    }

    public async Task ExportDb()
    {
        await using var file = new FileStream(dbPath, FileMode.Open);
        try
        {
            await FileSaver.Default.SaveAsync("basemix.sqlite3", file, cts.Token);
        }
        catch (FileSaveException e) when (e.Message is "Path doesn't exist.")
        {
            // CommunityToolkit doesn't handle people "cancelling" the file dialog and instead throws this exception.
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}